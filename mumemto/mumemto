#!/usr/bin/env python3

import sys
import subprocess
import os
from importlib import import_module

def run_mumemto(args):
    """Run the C++ executable with given args"""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    exec_path = os.path.join(script_dir, 'mumemto_exec')
    if not os.path.exists(exec_path):
        print("Error: mumemto not installed. Please use make to install mumemto first", file=sys.stderr)
        sys.exit(1)
    cmd = [exec_path] + args
    subprocess.run(cmd)

def run_viz(args):
    """Run visualization with given args"""
    try:
        if '--interactive' in args:
            # Remove --interactive flag and import viz_mums_interactive
            args.remove('--interactive')
            viz = import_module('mumemto.viz_mums_interactive')
        else:
            viz = import_module('mumemto.viz_mums')
        
        parsed_args = viz.parse_arguments(args)
        viz.main(parsed_args)
    except ImportError:
        # Fall back to running script directly
        script_dir = os.path.dirname(os.path.abspath(__file__))
        if '--interactive' in args:
            script = os.path.join(script_dir, '_mumemto', 'viz_mums_interactive.py')
        else:
            script = os.path.join(script_dir, '_mumemto', 'viz_mums.py')
        
        if not os.path.exists(script):
            if '--interactive' in args:
                print(f"Error: mumemto not installed. Please run mumemto/viz_mums_interactive.py directly.", file=sys.stderr)
            else:
                print(f"Error: mumemto not installed. Please run mumemto/viz_mums.py directly.", file=sys.stderr)
            sys.exit(1)
        subprocess.run([sys.executable, script] + args)

def run_inversions(args):
    """Run inversion detection"""
    try:
        inversions = import_module('mumemto.find_inversions')
        parsed_args = inversions.parse_arguments(args)
        inversions.main(parsed_args)
    except ImportError:
        script_dir = os.path.dirname(os.path.abspath(__file__))
        script = os.path.join(script_dir, '_mumemto', 'find_inversions.py')
        if not os.path.exists(script):
            print(f"Error: mumemto not installed. Please run mumemto/find_inversions.py directly.", file=sys.stderr)
            sys.exit(1)
        subprocess.run([sys.executable, script] + args)

def run_coverage(args):
    """Run MUM coverage analysis"""
    try:
        coverage = import_module('mumemto.mum_coverage')
        parsed_args = coverage.parse_arguments(args)
        coverage.main(parsed_args)
    except ImportError:
        script_dir = os.path.dirname(os.path.abspath(__file__))
        script = os.path.join(script_dir, '_mumemto', 'mum_coverage.py')
        if not os.path.exists(script):
            print(f"Error: mumemto not installed. Please run mumemto/mum_coverage.py directly.", file=sys.stderr)
            sys.exit(1)
        subprocess.run([sys.executable, script] + args)

def main():
    if len(sys.argv) == 1:
        print("\nmumemto - find maximal [unique | exact] matches using PFP.\n", file=sys.stderr)
        print("Usage: mumemto [subcommand] [ARGS]\nUse -h for detailed usage for each subcommand.", file=sys.stderr)
        print("Commands:\n\t[default]\t\tcompute multi-MUMs and MEMS across a collection of sequences\n\tviz\t\t\tvisualize multi-MUM synteny\n\tcoverage\t\tcompute multi-MUM coverage\n\tinversion\t\tidentify inversion SVs", file=sys.stderr)
        sys.exit(0)

    command = sys.argv[1]
    args = sys.argv[2:]

    if command == 'viz':
        run_viz(args)
    elif command == 'inversion':
        run_inversions(args)
    elif command == 'coverage':
        run_coverage(args)
    else:
        # If no special command, pass all args to mumemto executable
        run_mumemto(sys.argv[1:])

if __name__ == '__main__':
    main() 